/*
 * The code is automatically generated by the Goland.
 * Copyright © Aquarian-Age. All Rights Reserved.
 * Licensed under MIT
 */

package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"html/template"
	"liangzi.local/qx/pkg/gz"
	"liangzi.local/qx/pkg/pub"
	"liangzi.local/qx/pkg/x"
	"liangzi.local/qx/pkg/xjbfsv2"
	"log"
	"net/http"
	"strconv"
	"time"
)

//默认8111 指定端口 yq -l 9999
func main() {
	flag.Usage = func() {
		fmt.Println("yq -l port")
		flag.PrintDefaults()
	}
	p := flag.Int("l", 8111, "")
	flag.Parse()
	port := fmt.Sprintf(":%d", *p)
	fmt.Println("Default Server Port:", 8111)
	http.HandleFunc("/", Home)
	err := http.ListenAndServe(port, nil)
	if err != nil {
		log.Fatal("listenAndServer:", err)
	}
}
func Home(w http.ResponseWriter, r *http.Request) {
	if r.Method == "GET" {
		t, _ := template.ParseFiles("home.html")
		err := t.Execute(w, nil)
		if err != nil {
			return
		}
	} else {
		handhome(w, r)
	}
}
func handhome(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		return
	}
	t := getTimes(r)
	body := NewBody(t)
	b, err := json.Marshal(body)
	if err != nil {
		fmt.Println(err)
	}
	err = json.NewEncoder(w).Encode(string(b))
	if err != nil {
		return
	}
}

type Body struct {
	*gz.GanZhi
	Year         int            `json:"year"`
	Month        int            `json:"month"`
	Day          int            `json:"day"`
	Hour         int            `json:"hour"`
	Weeks        string         `json:"weeks"`
	JianChu      string         `json:"jian_chu"`
	HuangHei     string         `json:"huang_hei"`
	YueJiang     string         `json:"yue_jiang"`
	ZhongQi      string         `json:"zhong_qi"`
	RiQin        string         `json:"ri_qin"`
	JiaZiNaXiang string         `json:"jia_zi_na_xiang"`
	Xjbfsv2Obj   *xjbfsv2.XJBFS `json:"xjbfsv_2_obj"`
}

func NewBody(t time.Time) *Body {
	year, month, day, hour := t.Year(), int(t.Month()), t.Day(), t.Hour()
	gzo := gz.NewGanZhi(t.Year(), int(t.Month()), t.Day(), t.Hour())

	jianchu := gzo.JianChu()
	huanghei := gzo.RiHuangHei1()

	yjzhi, yjName, yjt, yjts := gzo.YueJiang()
	zhongqi := fmt.Sprintf("%v %v", yjts, yjt.Format("2006-01-02 15:04:05"))
	yueJiangS := fmt.Sprintf("月将:%s(%s)", yjzhi, yjName)

	weekn := int(t.Weekday())
	weeks := pub.WeekName(weekn)
	riqin := gzo.RiQin(weekn)

	jiazinaxiang := x.StarSelf(riqin)
	xjbfv2arr := xjbfsv2.NewXibfs(year, month, day, hour)

	return &Body{
		gzo,
		year,
		month,
		day,
		hour,
		weeks,
		jianchu,
		huanghei,
		yueJiangS,
		zhongqi,
		riqin,
		jiazinaxiang,
		xjbfv2arr,
	}
}

func getTimes(r *http.Request) time.Time {
	//年
	ly, err := strconv.Atoi(r.Form["ly"][0])
	if err != nil {
		log.Fatalln("年异常:", err)
	}
	//月
	lm, err := strconv.Atoi(r.Form["lm"][0])
	if err != nil {
		log.Fatalln("月异常: ", err)
	}

	//日
	ld, err := strconv.Atoi(r.Form["ld"][0])
	if err != nil {
		log.Fatalln("日异常:", err)
	}
	//时辰 子时1 丑时2 寅时3...
	lh, err := strconv.Atoi(r.Form["lh"][0])
	if err != nil {
		log.Fatalln("时辰异常:", err)
	}
	t := time.Date(ly, time.Month(lm), ld, lh, 0, 0, 0, time.Local)
	return t
}
